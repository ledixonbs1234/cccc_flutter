// Demo showing Vietnamese diacritic removal functionality
// This demonstrates how the search works with Vietnamese names

import '../lib/app/modules/home/controllers/home_controller.dart';
import '../lib/app/modules/home/models/cccdInfo.dart';

void main() {
  // Create a controller instance
  final controller = HomeController();

  // Add sample Vietnamese CCCD data
  controller.totalCCCD.addAll([
    CCCDInfo('D∆∞∆°ng L√™ Nh∆∞ Ng·ªçc', '20/11/2021', '052321010762'),
    CCCDInfo('Nguy·ªÖn VƒÉn H√πng', '15/05/1990', '052321010763'),
    CCCDInfo('Tr·∫ßn Th·ªã H·∫°nh', '08/03/1985', '052321010764'),
    CCCDInfo('L√™ Minh ƒê·ª©c', '22/12/1992', '052321010765'),
    CCCDInfo('Ph·∫°m Th·ªã H∆∞∆°ng', '10/07/1988', '052321010766'),
    CCCDInfo('Ho√†ng VƒÉn Tu·∫•n', '03/09/1995', '052321010767'),
  ]);

  print('=== Vietnamese Search Demo ===\n');

  // Test cases showing how search works without diacritics
  final testCases = [
    {'search': 'Ngoc', 'should_find': 'Ng·ªçc'},
    {'search': 'Duong', 'should_find': 'D∆∞∆°ng'},
    {'search': 'Hung', 'should_find': 'H√πng'},
    {'search': 'Hanh', 'should_find': 'H·∫°nh'},
    {'search': 'Duc', 'should_find': 'ƒê·ª©c'},
    {'search': 'Huong', 'should_find': 'H∆∞∆°ng'},
    {'search': 'Tuan', 'should_find': 'Tu·∫•n'},
  ];

  for (var testCase in testCases) {
    String searchTerm = testCase['search']!;
    String expectedFind = testCase['should_find']!;

    // Find matching CCCD using the same logic as searchCCCD method
    String normalizedSearchValue =
        controller.removeDiacritics(searchTerm.toLowerCase());

    int foundIndex = controller.totalCCCD.indexWhere((item) {
      String normalizedName =
          controller.removeDiacritics(item.Name.toLowerCase());
      return normalizedName.contains(normalizedSearchValue);
    });

    if (foundIndex != -1) {
      CCCDInfo foundCCCD = controller.totalCCCD[foundIndex];
      print(
          '‚úÖ Search "$searchTerm" ‚Üí Found: "${foundCCCD.Name}" (contains "$expectedFind")');

      // Calculate scroll position
      double estimatedItemHeight = 88.0;
      double scrollPosition = foundIndex * estimatedItemHeight;
      print(
          '   üìç Would scroll to position: ${scrollPosition}px (item $foundIndex)\n');
    } else {
      print('‚ùå Search "$searchTerm" ‚Üí No match found\n');
    }
  }

  print('=== Diacritic Removal Examples ===\n');

  // Show some examples of diacritic removal
  final examples = [
    'Ng·ªçc ‚Üí ${controller.removeDiacritics('Ng·ªçc')}',
    'D∆∞∆°ng ‚Üí ${controller.removeDiacritics('D∆∞∆°ng')}',
    'H√πng ‚Üí ${controller.removeDiacritics('H√πng')}',
    'H·∫°nh ‚Üí ${controller.removeDiacritics('H·∫°nh')}',
    'ƒê·ª©c ‚Üí ${controller.removeDiacritics('ƒê·ª©c')}',
    'H∆∞∆°ng ‚Üí ${controller.removeDiacritics('H∆∞∆°ng')}',
    'Tu·∫•n ‚Üí ${controller.removeDiacritics('Tu·∫•n')}',
  ];

  for (var example in examples) {
    print('üîÑ $example');
  }

  print('\n=== Search Features ===');
  print('‚ú® Case-insensitive search');
  print('‚ú® Vietnamese diacritic removal (optimized regex-based)');
  print('‚ú® Accurate scroll positioning');
  print('‚ú® Works with AlwaysScrollableScrollPhysics');
  print('‚ú® Handles empty search gracefully');
  print('‚ú® Prevents scrolling beyond max extent');
  print('‚ú® Efficient regex patterns for better performance');
}
